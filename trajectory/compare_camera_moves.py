#!/usr/bin/env python
"""
Script to compare different camera movements generated by TrajectoryCrafter.
This script will:
1. Run multiple tests with different camera moves on a video
2. Create an HTML page to easily compare the results
"""

import os
import sys
import argparse
from datetime import datetime
import shutil
import webbrowser
from pathlib import Path

# Import from inference_ultra
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from inference_ultra import run_multiple_tests, CameraMove

def create_comparison_html(results, video_path, output_dir, parameters):
    """
    Create an HTML page to compare the different camera move results.
    
    Args:
        results: Dictionary of move_name -> output_path
        video_path: Path to the original video
        output_dir: Directory to save the HTML file
        parameters: Dictionary of parameter settings
        
    Returns:
        Path to the HTML file
    """
    html_path = os.path.join(output_dir, "comparison.html")
    
    # Get video filename for display
    video_filename = os.path.basename(video_path)
    
    # Create HTML content
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Camera Move Comparison - {video_filename}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            h1, h2 {{ color: #333; }}
            .video-container {{ display: flex; flex-wrap: wrap; gap: 20px; margin-top: 20px; }}
            .video-item {{ width: 45%; min-width: 400px; margin-bottom: 30px; }}
            .video-item h3 {{ margin-top: 0; }}
            video {{ width: 100%; height: auto; }}
            .parameters {{ background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }}
            .parameters p {{ margin: 5px 0; }}
        </style>
    </head>
    <body>
        <h1>Camera Move Comparison</h1>
        <h2>Original Video: {video_filename}</h2>
        
        <div class="parameters">
            <h3>Parameters</h3>
            <p><strong>Time:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    """
    
    # Add parameters
    for key, value in parameters.items():
        html += f"        <p><strong>{key}:</strong> {value}</p>\n"
    
    html += """
        </div>
        
        <div class="video-container">
    """
    
    # Add videos
    for move_name, video_path in results.items():
        relative_path = os.path.relpath(video_path, output_dir)
        html += f"""
            <div class="video-item">
                <h3>{move_name}</h3>
                <video controls loop>
                    <source src="{relative_path}" type="video/mp4">
                    Your browser does not support the video tag.
                </video>
            </div>
        """
    
    html += """
        </div>
    </body>
    </html>
    """
    
    # Write the HTML file
    with open(html_path, "w") as f:
        f.write(html)
    
    return html_path

def main():
    parser = argparse.ArgumentParser(description='Run and compare different camera movements with TrajectoryCrafter')
    parser.add_argument('--video_path', type=str, required=True, help='Path to input video')
    parser.add_argument('--output_dir', type=str, help='Output directory for results')
    parser.add_argument('--stride', type=int, default=2, help='Frame sampling stride (1-3)')
    parser.add_argument('--center_scale', type=float, default=1.0, help='Center scale factor (0.1-2.0)')
    parser.add_argument('--sampling_steps', type=int, default=50, help='Number of diffusion steps (1-50)')
    parser.add_argument('--random_seed', type=int, default=43, help='Random seed (0-2^31)')
    parser.add_argument('--mode', type=str, default='gradual', help='Camera mode (gradual, direct, or bullet)')
    parser.add_argument('--camera_moves', type=str, nargs='+', help='Specific camera moves to test (e.g. ZOOM_IN ZOOM_OUT)')
    parser.add_argument('--open_browser', action='store_true', help='Open the comparison HTML in the default browser')
    
    args = parser.parse_args()
    
    # Set up output directory
    if args.output_dir is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        args.output_dir = f'./experiments/comparison_{timestamp}'
    
    # Run the tests
    print(f"Running camera move tests on {args.video_path}...")
    results = run_multiple_tests(
        video_path=args.video_path,
        output_base_dir=args.output_dir,
        stride=args.stride,
        center_scale=args.center_scale,
        sampling_steps=args.sampling_steps,
        random_seed=args.random_seed,
        mode=args.mode,
        camera_moves=args.camera_moves
    )
    
    # Create parameters dictionary for HTML
    parameters = {
        "Stride": args.stride,
        "Center Scale": args.center_scale,
        "Sampling Steps": args.sampling_steps,
        "Random Seed": args.random_seed,
        "Mode": args.mode
    }
    
    # Create HTML comparison
    html_path = create_comparison_html(results, args.video_path, args.output_dir, parameters)
    
    print(f"Comparison HTML created at: {html_path}")
    
    # Open in browser if requested
    if args.open_browser:
        html_url = Path(html_path).as_uri()
        print(f"Opening in browser: {html_url}")
        webbrowser.open(html_url)

if __name__ == "__main__":
    main() 